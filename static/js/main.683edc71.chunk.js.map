{"version":3,"sources":["components/Board.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Board","Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","size","board","currentPlayer","validCell","message","isStart","isEnd","canMove","_move","bind","assertThisInitialized","_start","_reset","_initBoard","_this$state","i","len","j","push","setState","loc","_this2","_isValidCell","_this$state2","concat","forEach","item","setTimeout","_nextTurn","_this3","_showMoveInfo","_this4","_findAllValidCell","keys","length","nextValidCell","score","_getScore","currentLoc","tmp","arguments","undefined","_this$state3","dirs","_currentLoc","slicedToArray","currentI","currentJ","x","found","newI","newJ","key","_this$state4","_findValidCell","_this$state5","count","B","W","_this5","_this$state6","styles","width","cell","height","react_default","a","createElement","className","style","map","row","onClick","type","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.683edc71.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Notification from './Notification';\r\n\r\n\r\nclass Board extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            size: 8,\r\n            board: [],\r\n            currentPlayer: 1,\r\n            validCell: null,\r\n            message: null,\r\n            isStart: false,\r\n            isEnd: false,\r\n            canMove: true\r\n        };\r\n\r\n        this._move = this._move.bind(this);\r\n        this._start = this._start.bind(this);\r\n        this._reset = this._reset.bind(this);\r\n    }\r\n\r\n    componentWillMount(){\r\n        this._initBoard();\r\n    }\r\n\r\n    _initBoard(){\r\n        let { board, size } = this.state;\r\n\r\n        for(let i=0, len=this.state.size; i < len; i++){\r\n            board[i] = [];\r\n            for(let j=0, len=this.state.size; j < len; j++){\r\n                board[i].push(null);\r\n            }\r\n        }\r\n\r\n        board[size / 2 - 1][size / 2 - 1] = 1;\r\n        board[size / 2 - 1][size / 2 ] = -1;\r\n        board[size / 2][size / 2 - 1] = -1;\r\n        board[size / 2][size / 2 ] = 1;\r\n\r\n        this.setState({ board });\r\n    }\r\n\r\n    _move(loc){\r\n        if(this._isValidCell(loc)){\r\n            this.setState({ validCell: null });\r\n            let { board, currentPlayer, validCell } = this.state;\r\n\r\n            // fill the board\r\n            board[loc[0]][loc[1]] = currentPlayer;\r\n            // replace the cell\r\n            const key = `${loc[0]}_${loc[1]}`;\r\n            const replaceCell = validCell[key];\r\n            replaceCell.forEach(item => board[item[0]][item[1]] = currentPlayer);\r\n            // change player\r\n            this.setState({ board });\r\n            setTimeout(() => this._nextTurn(), 0);\r\n        }\r\n        else {\r\n            this.setState({ message: 'Invalid Move !' });\r\n            setTimeout(() => {\r\n                this.setState({ message: null });\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    _nextTurn(){\r\n        this.setState(\r\n            state => ({ currentPlayer: -state.currentPlayer }),\r\n            () => this._showMoveInfo()\r\n        );\r\n    }\r\n\r\n    _showMoveInfo(){\r\n        let { currentPlayer } = this.state;\r\n\r\n        const validCell = this._findAllValidCell(currentPlayer);\r\n        if(Object.keys(validCell).length > 0){\r\n            this.setState({ validCell });\r\n        }\r\n        else {\r\n            this.setState(\r\n                { message: currentPlayer === 1 ? 'Black CANNOT PLAY' : 'White CANNOT PLAY'},\r\n                () => {\r\n                    setTimeout(() => {\r\n                        const nextValidCell = this._findAllValidCell(-currentPlayer);\r\n                        if(Object.keys(nextValidCell).length > 0){\r\n                            this.setState({ message: null });\r\n                            this._nextTurn();\r\n                        }\r\n                        else {\r\n                            const score = this._getScore();\r\n\r\n                            if(score['B'] > score['W']){\r\n                                this.setState({ isEnd: true, message: 'GAME OVER ! Black Win' });\r\n                            }\r\n                            else if(score['B'] < score['W']){\r\n                                this.setState({ isEnd: true, message: 'GAME OVER ! White Win' });\r\n                            }\r\n                            else {\r\n                                this.setState({ isEnd: true, message: 'GAME OVER ! Draw' });\r\n                            }\r\n                        }\r\n                    }, 1000)\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    _findValidCell(currentLoc, currentPlayer, tmp={}){\r\n        const { board, size } = this.state;\r\n        const dirs = [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [-1, 1], [1, -1], [1, 1]];\r\n\r\n        let [currentI, currentJ] = currentLoc;\r\n        for(let x=0, len=dirs.length; x < len; x++){\r\n            let found = [];\r\n            let newI = currentI + dirs[x][0];\r\n            let newJ = currentJ + dirs[x][1];\r\n            while(newI > -1 && newJ > -1 && newI < size && newJ < size){\r\n                if(board[newI][newJ] === null){\r\n                    if(found.length > 0){\r\n                        let key = `${newI}_${newJ}`;\r\n                        if(tmp[key]){\r\n                            found.forEach(item => tmp[key].push(item));\r\n                        }\r\n                        else {\r\n                            tmp[key] = found;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                else if(board[newI][newJ] === -currentPlayer){\r\n                    found.push([newI, newJ]);\r\n                }\r\n                else if(board[newI][newJ] === currentPlayer){\r\n                    break;\r\n                }\r\n\r\n                newI = newI + dirs[x][0];\r\n                newJ = newJ + dirs[x][1];\r\n            }\r\n        }\r\n\r\n        return tmp;\r\n    }\r\n\r\n    _findAllValidCell(currentPlayer){\r\n        let tmp = {};\r\n        const { board, size } = this.state;\r\n        \r\n        for(let i=0; i < size; i++){\r\n            for(let j=0; j < size; j++){\r\n                if(board[i][j] === currentPlayer){\r\n                    tmp = this._findValidCell([i, j], currentPlayer, tmp);\r\n                }\r\n            }\r\n        }\r\n\r\n        return tmp;\r\n    }\r\n\r\n    _isValidCell(loc){\r\n        const { validCell } = this.state;\r\n        const key = `${loc[0]}_${loc[1]}`;\r\n        if(validCell && validCell[key]){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _getScore(){\r\n        const { board, size } = this.state;\r\n        let count = {\r\n            'B': 0,\r\n            'W': 0\r\n        };\r\n\r\n        for(let i=0; i < size; i++){\r\n            for(let j=0; j < size; j++){\r\n                if(board[i][j] === 1){\r\n                    count['B'] += 1;\r\n                }\r\n                if(board[i][j] === -1){\r\n                    count['W'] += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    _start(){\r\n        this.setState({ isStart: true });\r\n        this._showMoveInfo();\r\n    }\r\n\r\n    _reset(){\r\n        this._initBoard();\r\n        this.setState({\r\n            currentPlayer: 1,\r\n            validCell: null,\r\n            message: null,\r\n            isStart: false,\r\n            isEnd: false,\r\n            canMove: true\r\n        });\r\n    }\r\n\r\n\trender(){\r\n        const { board, size, currentPlayer, message, isEnd, isStart } = this.state;\r\n        const styles = {\r\n            board: {\r\n                width: size * 50\r\n            },\r\n            cell: {\r\n                width: 50,\r\n                height: 50\r\n            }\r\n        };\r\n        const score = this._getScore();\r\n        \r\n\t\treturn (\r\n\t\t\t<div className='wrapper'>\r\n                <table className='board' style={styles.board}>\r\n                    <tbody>\r\n                    {\r\n                        board.map((row, i) =>\r\n                            <tr key={i}>\r\n                                {\r\n                                    row.map((cell, j) =>\r\n                                        <td \r\n                                            key={j}\r\n                                            className={this._isValidCell([i, j]) ? 'cell isValid' : 'cell'} \r\n                                            style={styles.cell}\r\n                                            onClick={() => this._move([i, j])}\r\n                                        >\r\n                                            {\r\n                                                cell === 1 &&\r\n                                                <span className='cell-B'></span>\r\n                                            }\r\n                                            {\r\n                                                cell === -1 &&\r\n                                                <span className='cell-W'></span>\r\n                                            }\r\n                                        </td>\r\n                                    )\r\n                                }\r\n                            </tr>\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            \r\n                <div>\r\n                    {\r\n                        message &&\r\n                        <div className='notification'>\r\n                            {message}\r\n                        </div>\r\n                    }\r\n                    <div className={currentPlayer === 1 ? 'playerB-notification isActive' : 'playerB-notification'}>\r\n                        <span>Player {currentPlayer === 1 ? 'Black' : 'White'}</span>\r\n                        <span className='score'>{score['B']}</span>\r\n                    </div>\r\n                    <div className={currentPlayer === -1 ? 'playerW-notification isActive' : 'playerW-notification'}>\r\n                        <span className='score'>{score['W']}</span>\r\n                        <span>Player {currentPlayer === 1 ? 'Black' : 'White'}</span>\r\n                    </div>\r\n                    \r\n                    {\r\n                        isStart\r\n                        ?\r\n                        <button type='button' className='btn-reset' onClick={this._reset}>Reset</button>\r\n                        :\r\n                        <button type='button' className='btn-reset' onClick={this._start}>Start</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass Notification extends Component {\r\n\trender() {\r\n        const { text, position } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"notification\">\r\n                {text}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\nimport Board from './components/Board';\nimport './App.css';\n\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Board />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}